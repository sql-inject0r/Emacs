* Basic Settings
** Menu's
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+END_SRC
** startup screen
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** Bell
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC
** Diasble backups auto saves
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
   #+END_SRC
** Alias
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Highlight line
   - highlight your current line 
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode +1)
   #+END_SRC
** backup directory
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.saves")))
   #+END_SRC
** line number
   #+BEGIN_SRC emacs-lisp
      (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** Highlighting parenthesis
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'default-frame-alist
		    '(font . "JetBrains Mono-14"))
   #+END_SRC
* Ido mode
  - for search completion 
  #+BEGIN_SRC emacs-lisp
    (setq ido-everywhere t)



    (setq ido-enable-flex-matching t)
    (ido-mode t)
  #+END_SRC
* Terminal
** default shell as bash
   #+BEGIN_SRC emacs-lisp
     (defvar my-term-shell "/bin/bash")
     (defadvice ansi-term (before force-bash)
       (interactive (list my-term-shell)))
     (ad-activate 'ansi-term)
   #+END_SRC
** keybinding for ansi term
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-k") 'ansi-term)
   #+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-acario-dark t))
#+END_SRC
  
* which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode t))
#+END_SRC

* modeline
  #+BEGIN_SRC emacs-lisp
	(use-package doom-modeline
	  :ensure t
	  :init
	  (doom-modeline-mode 1))
  #+END_SRC
* icons
  #+BEGIN_SRC emacs-lisp
    (use-package all-the-icons
      :ensure t)
  #+END_SRC
  
* Config Visit
** visit config
   #+BEGIN_SRC emacs-lisp
     (defun config-visit ()
       (interactive)
       (find-file "~/.emacs.d/config.org"))
     (global-set-key (kbd "C-c e") 'config-visit)
   #+END_SRC
** reload config
   #+BEGIN_SRC emacs-lisp
     (defun config-reload ()
       (interactive)
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
     (global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC
** vist init
   #+BEGIN_SRC emacs-lisp
     (defun init-visit ()
       (interactive)
       (find-file "~/.emacs.d/init.el"))
(global-set-key (kbd "C-c i") 'init-visit)
   #+END_SRC
      
* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config
      (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
      (projectile-mode +1))
  #+END_SRC

* Dashboard
  - setting up a proper startup dashboard
    #+BEGIN_SRC emacs-lisp
      (use-package dashboard
	:ensure t
	:init
	(progn
	  (setq dashboard-items ' ((recents . 5)
				   (projects .5)))
	  (setq dashboard-show-shortcuts nil)
	  ;;change dashboard-center to nil if you dont want it centered !
	  (setq dashboard-center-content t)
	  (setq dashboard-banner-logo-title "Namaskar Marah, warev chuv ?")
	  (setq dashboard-set-file-icons t)
	  (setq dashboard-set-heading-icons t)
	  (setq dashboard-startup-banner "~/Downloads/fancy_bear_banner.png")
	  (setq dashboard-set-navigator t)
          (setq dashboard-set-init-info t)
	  )
	:config
	(dashboard-setup-startup-hook ))
    #+END_SRC

* Fancy battery
  #+BEGIN_SRC emacs-lisp
    (use-package fancy-battery
      :ensure t
      :init
      (fancy-battery-mode 1)
      (setq fancy-battery-show-percentage t))
  #+END_SRC
* Electric pair mode
  #+BEGIN_SRC emacs-lisp
    (setq electric-pair-pairs '(
				 (?\{ . ?\})
				 (?\( . ?\))
				 (?\[ . ?\])
				 (?\" . ?\")
				 (?\< . ?\>)
				 ))
    (electric-pair-mode t)

  #+END_SRC
* Functions
  #+BEGIN_SRC emacs-lisp
    (defun kill-whole-word()
      (interactive)
      (backward-word)
      (kill-word 1)
      )
    (global-set-key (kbd "C-c w w") 'kill-whole-word)
  #+END_SRC
* Hungry delete
  #+BEGIN_SRC emacs-lisp
    (use-package hungry-delete
      :ensure t
      :config (global-hungry-delete-mode ))
  #+END_SRC
* Beacon
  #+BEGIN_SRC emacs-lisp
    (use-package beacon
      :ensure t
      :config
      (beacon-mode 1))
  #+END_SRC
* Rainbow color
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-mode
      :ensure t
      :init (add-hook 'prog-mode-hook 'rainbow-mode))
  #+END_SRC
* Rainbow mode
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init (rainbow-delimiters-mode 1))
  #+END_SRC
* Kill region
** Max entries on the kill ring
   #+BEGIN_SRC emacs-lisp
     (setq kill-ring-max 50)
   #+END_SRC

** popup-kill-ring
   #+BEGIN_SRC emacs-lisp
     (use-package popup-kill-ring
       :ensure t
       :bind ("M-y" . popup-kill-ring))
   #+END_SRC
* Org
** Org bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC
** org deadlines
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files (append
			     (file-expand-wildcards "~/Org")))
   #+END_SRC
** org agenda
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-o") 'org-agenda)
  #+END_SRC      
* Switch Window the smarter way
  #+BEGIN_SRC emacs-lisp
    (use-package switch-window
      :ensure t
      :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
	      '("a" "s" "d" "f" "h" "j" "k" "l"))
      :bind
      ([remap other-window] . switch-window))
  #+END_SRC
* Following the windows
  #+BEGIN_SRC emacs-lisp
    (defun split-and-follow-horizontally ()
      (interactive)
      (split-window-below)
      (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

    (defun split-and-follow-vertically ()
      (interactive)
      (split-window-right)
      (balance-windows)
      (other-window 1))
    (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
  #+END_SRC
* Swiper
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      :bind ("C-s" . swiper))
  #+END_SRC
* Clock
** setting up the format
   #+BEGIN_SRC emacs-lisp
     (setq display-time-24hr-format t)
     (setq display-time-format "%H:%M")
   #+END_SRC
** enabling the mode
   #+BEGIN_SRC emacs-lisp
     (display-time-mode 1)
   #+END_SRC
* Treemacs
  #+BEGIN_SRC emacs-lisp
    (use-package treemacs
      :ensure t
      :bind
      ( :map global-map
	     ([f8] . treemacs)
	     ("C-<f8>" . treemacs-select-window))
      :config
      (setq treemacs-is-never-other-window t)
      )
  #+END_SRC
*  IRC
  #+BEGIN_SRC emacs-lisp
    (setq erc-server "irc.libera.chat"
	  erc-nick "m0r1tz"    ; Change this!
	  erc-user-full-name "IM A NOBODY"  ; And this!
	  erc-track-shorten-start 8
	  erc-autojoin-channels-alist '(("irc.libera.chat"))
	  erc-kill-buffer-on-part t
		erc-auto-query 'bury)

  #+END_SRC
* Programming
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 2)
      )

    (use-package company-irony
      :ensure t
      :config
      (require 'company)
      (add-to-list 'company-backends 'company-irony))

    (use-package irony
      :ensure t
      :config
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

    (with-eval-after-load 'company
      (add-hook 'c++-mode-hook 'company-mode)
      (add-hook 'c-mode-hook 'company-mode)) 
  #+END_SRC
* Media
** EMMS
   #+BEGIN_SRC emacs-lisp
     (use-package emms
       :ensure t
       :config
	 (require 'emms-setup)
	 (require 'emms-player-mpd)
	 (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
	 (setq emms-seek-seconds 5)
	 (setq emms-player-list '(emms-player-mpd))
	 (setq emms-info-functions '(emms-info-mpd))
	 (setq emms-player-mpd-server-name "localhost")
	 (setq emms-player-mpd-server-port "6601")
       :bind
	 ("s-m p" . emms)
	 ("s-m b" . emms-smart-browse)
	 ("s-m r" . emms-player-mpd-update-all-reset-cache)
	 ("<XF86AudioPrev>" . emms-previous)
	 ("<XF86AudioNext>" . emms-next)
	 ("<XF86AudioPlay>" . emms-pause)
	 ("<XF86AudioStop>" . emms-stop))

   #+END_SRC
** Mpc setup
   #+BEGIN_SRC emacs-lisp
     (setq mpc-host "localhost:6601")
   #+END_SRC
** MPD bindings -
*** Start The daemon
    #+BEGIN_SRC emacs-lisp
      (defun mpd/start-music-daemon ()
	"Start MPD, connects to it and syncs the metadata cache."
	(interactive)
	(shell-command "mpd")
	(mpd/update-database)
	(emms-player-mpd-connect)
	(emms-cache-set-from-mpd-all)
	(message "MPD Started!"))
      (global-set-key (kbd "s-m c") 'mpd/start-music-daemon)
    #+END_SRC
*** Killing the daemon
    #+BEGIN_SRC emacs-lisp
      (defun mpd/kill-music-daemon ()
	"Stops playback and kill the music daemon."
	(interactive)
	(emms-stop)
	(call-process "killall" nil nil nil "mpd")
	(message "MPD Killed!"))
      (global-set-key (kbd "s-m k") 'mpd/kill-music-daemon)
    #+END_SRC
*** Updating the daemon
    #+BEGIN_SRC emacs-lisp
      (defun mpd/update-database ()
	"Updates the MPD database synchronously."
	(interactive)
	(call-process "mpc" nil nil nil "update")
	(message "MPD Database Updated!"))
      (global-set-key (kbd "s-m u") 'mpd/update-database)
    #+END_SRC

* Games
** Tetris
   - A simple shortcut for playing tetris in emacs !
     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "M-t" 'tetris))
     #+END_SRC

* Misc
** animated birthday -
   - an animated birthday poem for the person !
     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "M-b") 'animate-birthday-present)
     #+END_SRC
* Magit
  - Magit is an amazing git client !
    #+BEGIN_SRC emacs-lisp
;; C-x g for status
      (use-package magit
	:ensure t)
    #+END_SRC
    

* fist commit using magit
  #+BEGIN_SRC sh
    echo this is my first commit using magit
    figlet YAY :DDDDDDDDDDDDDD | lolcat
  #+END_SRC
